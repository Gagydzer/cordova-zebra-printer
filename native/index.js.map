{"version":3,"sources":["../../../src/@ionic-native/plugins/zebra-printer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;GAUG;AACH,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAwBxE;;;;;;;;;;;;;;;;;;;;GAoBG;AAWH;IAAkC,gCAAiB;IAAnD;;IAqBA,CAAC;IAnBC,2BAAI,GAAJ,UAAK,OAA0B,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE1D,4BAAK,GAAL,UAAM,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE1D,kCAAW,GAAX,cAAkC,MAAM,CAAC,CAAC,CAAC;IAE3C,oCAAa,GAAb,UAAc,OAA+B,IAA4B,MAAM,CAAC,CAAC,CAAC;IAElF,8BAAO,GAAP,UAAQ,OAA+B,IAAsB,MAAM,CAAC,CAAC,CAAC;IAEtE,iCAAU,GAAV,cAAiC,MAAM,CAAC,CAAC,CAAC;IAE1C,+BAAQ,GAAR,cAAuC,MAAM,CAAC,CAAC,CAAC;IAC3C,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,2BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAlBA;QADC,OAAO,EAAE;;;;4CACgD;IAE1D;QADC,OAAO,EAAE;;;;6CACgD;IAE1D;QADC,OAAO,EAAE;;;;mDACiC;IAE3C;QADC,OAAO,EAAE;;;;qDACwE;IAElF;QADC,OAAO,EAAE;;;;+CAC4D;IAEtE;QADC,OAAO,EAAE;;;;kDACgC;IAE1C;QADC,OAAO,EAAE;;;;gDACsC;IAdrC,YAAY;QAVxB,MAAM,CAAC;YACN,UAAU,EAAE,cAAc;YAC1B,MAAM,EAAE,EAAE;YACV,SAAS,EAAE,EAAE;YACb,IAAI,EAAE,EAAE;YACR,OAAO,EAAE,EAAE;YACX,gBAAgB,EAAE,EAAE;YACpB,SAAS,EAAE,EAAE,CAAC,4DAA4D;SAC3E,CAAC;OAEW,YAAY,CAqBxB;IAAD,mBAAC;CArBD,AAqBC,CArBiC,iBAAiB,GAqBlD;SArBY,YAAY","file":"index.js","sourceRoot":"","sourcesContent":["/**\n * This is a template for new plugin wrappers\n *\n * TODO:\n * - Add/Change information below\n * - Document usage (importing, executing main functionality)\n * - Remove any imports that you are not using\n * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added\n * - Remove this note\n *\n */\nimport { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface Printer {\n  name: string;\n  address: string;\n}\n\nexport interface DiscoveryResult {\n  printers: Array<Printer>;\n}\n\nexport interface PrinterStatus {\n  connected: boolean;\n  isReadyToPrint?: boolean;\n  isPaused?: boolean;\n  isReceiveBufferFull?: boolean;\n  isRibbonOut?: boolean;\n  isPaperOut?: boolean;\n  isHeadTooHot?: boolean;\n  isHeadOpen?: boolean;\n  isHeadCold?: boolean;\n  isPartialFormatInProgress?: boolean;\n}\n\n/**\n * @name Zebra Printer\n * @description\n * This plugin does something\n *\n * @usage\n * ```typescript\n * import { ZebraPrinter } from '@ionic-native/zebra-printer';\n *\n *\n * constructor(private zebraPrinter: ZebraPrinter) { }\n *\n * ...\n *\n *\n * this.zebraPrinter.functionName('Hello', 123)\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'ZebraPrinter',\n  plugin: '', // npm package name, example: cordova-plugin-camera\n  pluginRef: '', // the variable reference to call the plugin, example: navigator.geolocation\n  repo: '', // the github repository URL for the plugin\n  install: '', // OPTIONAL install command, in case the plugin requires variables\n  installVariables: [], // OPTIONAL the plugin requires variables\n  platforms: [] // Array of platforms supported, example: ['Android', 'iOS']\n})\n\nexport class ZebraPrinter extends IonicNativePlugin {\n  @Cordova()\n  echo(options: { value: string }): Promise<any> { return; }\n  @Cordova()\n  print(options: { cpcl: string }): Promise<any> { return; }\n  @Cordova()\n  isConnected(): Promise<boolean> { return; }\n  @Cordova()\n  printerStatus(options: { MACAddress: string }): Promise<PrinterStatus> { return; }\n  @Cordova()\n  connect(options: { MACAddress: string }): Promise<boolean> { return; }\n  @Cordova()\n  disconnect(): Promise<boolean> { return; }\n  @Cordova()\n  discover(): Promise<DiscoveryResult> { return; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}